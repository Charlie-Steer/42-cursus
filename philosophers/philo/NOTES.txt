PHILOS MUST TRY TO NOT DIE.
n_philo == n_forks.
A philosopher needs two forks to eat.
If 1 philo => only one fork.
Protect each fork with a mutex to avoid fork duplication.

Cycle:
eat -> sleep
sleep -> think
think ?->

Philo dies -> simulation ends.
Philos must never die.

CLI Arguments:
	- number_of_philosophers: And forks.
	- time_to_die: reset at start of meal.
	- time_to_sleep.
	- number_of_times_each_philosopher_must_eat (optional):
		- simulation ends on every philo eating at least this number.
		- Else only ends on philo death.

Every philo has a number from 1 to n where n is number_of_philosophers.

Logging (timestamp_in_ms == time since simulation starts; X == philo_number):
timestamp_in_ms X has taken a fork.
timestamp_in_ms X is eating.
timestamp_in_ms X is sleeping.
timestamp_in_ms X is thinking.
timestamp_in_ms X died.

A death must be printed within 10ms.
